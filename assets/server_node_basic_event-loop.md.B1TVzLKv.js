import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.XczS8JdJ.js";const l="/knowledge-has-no-limit/assets/2020250204155033.BFMEaBw4.png",p="/knowledge-has-no-limit/assets/2020250204222946.C8PxaQYA.png",t="/knowledge-has-no-limit/assets/2020250204160426.D124uV_S.png",b=JSON.parse('{"title":"事件循环","description":"","frontmatter":{},"headers":[],"relativePath":"server/node/basic/event-loop.md","filePath":"server/node/basic/event-loop.md","lastUpdated":1738685171000}'),h={name:"server/node/basic/event-loop.md"};function k(r,s,d,c,o,E){return n(),a("div",null,s[0]||(s[0]=[e('<h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1><h2 id="进程与线程" tabindex="-1">进程与线程 <a class="header-anchor" href="#进程与线程" aria-label="Permalink to &quot;进程与线程&quot;">​</a></h2><p>进程是对正在运行中的程序的一个抽象。当启动一个程序时，操作系统就会给该程序创建一个<code>内存空间</code>（当程序被中止时，该内存空间就会被回收），该内存空间就是用来存放<code>程序代码</code>，<code>运行中的数据</code>和<code>一个执行任务的主线程</code>，这样的一个运行环境（内存空间）就被称为<code>进程</code>。</p><p>每个应用至少要有一个进程，进程之间是完全隔离相互独立的，进程的通信需要借助<code>管道IPC</code>来传递。</p><p>一个进程至少包含一个线程，会在进程开启后自动创建，这个线程被称之为<code>主线程</code>。线程是进程的执行单元，是依附于进程的。进程将任务分为多个细小任务，分配给多个线程单独执行，可以提高运行效率。</p><h2 id="浏览器事件循环" tabindex="-1">浏览器事件循环 <a class="header-anchor" href="#浏览器事件循环" aria-label="Permalink to &quot;浏览器事件循环&quot;">​</a></h2><h3 id="浏览器进程模型" tabindex="-1">浏览器进程模型 <a class="header-anchor" href="#浏览器进程模型" aria-label="Permalink to &quot;浏览器进程模型&quot;">​</a></h3><p>现代浏览器是一个<code>多进程多线程</code>的应用程序，它在启动时会开启多个进程，拥有数个功能模块，会把不同的功能模块放在不同的进程里。</p><p><img src="'+l+'" alt="浏览器进程模型"></p><p>类似与微服务架构，这意味着单个模块的崩溃不会牵连到其他模块。</p><p>其中有几个比较重要的进程：</p><p><strong>📖 浏览器主进程</strong></p><p>它是浏览器的主进程，无论打开多少标签页、浏览器窗口，都只会存在一个浏览器主进程，它主要负责浏览器界面展示、用户的交互、子进程管理</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里的界面和交互，指的是浏览器本身自带的界面部分（前进后退刷新按钮、导航栏、书签栏），以及浏览器的交互（滚动条、键盘等）</p><p>打开浏览器只有一个浏览器主进程，其他的进程是由主进程创建的，用于处理多个不同的任务，这些新开启的进程会交由子进程管理<code>统一管理</code></p></div><p><strong>📖 网络进程</strong></p><p>负责加载网络资源，网络进程会开启多个线程处理不同的任务。</p><p><strong>🌟 渲染进程</strong></p><p>渲染进程启动后，会开启一个<strong>渲染主线程</strong>，主线程负责执行解析<code>HTML</code>、<code>CSS</code>、<code>JS脚本</code>和其他资源。默认情况下，浏览器会为每个标签页开启一个新的渲染进程，保证不同的标签页之间不相互影响。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>渲染进程也是前端开发要重点关注的进程</p></div><p><img src="'+p+'" alt="子进程管理"></p><h3 id="渲染主线程" tabindex="-1">渲染主线程 <a class="header-anchor" href="#渲染主线程" aria-label="Permalink to &quot;渲染主线程&quot;">​</a></h3><p>渲染进程启动后，会开启一个渲染主线程，它是浏览器最繁忙的线程，需要处理的任务有很多：</p><ul><li>解析<code>HTML</code></li><li>解析<code>CSS</code></li><li>计算样式</li><li>布局</li><li>处理图层</li><li>绘制页面</li><li>解析<code>JS</code>代码并执行</li><li>执行事件处理回调函数</li><li>执行各种回调函数</li><li>......</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>为什么浏览器不采用多线程的方式去处理这么多任务？</p><p><code>JavaScript</code>的解析和执行是由渲染进程的主线程完成的，这个线程是渲染进程的核心线程，负责处理大多数关键任务。所有代码默认在这个线程上顺序执行，这意味着：</p><ul><li><strong>同一时间只能做一件事</strong>，代码逐行顺序执行。</li><li><strong>没有多线程的复杂性</strong>，不需要处理多线程的锁、竞态问题等</li><li>如果一个任务长时间占用主线程，整个程序会被<strong>阻塞</strong></li></ul><p><code>JavaScript</code>在设计之初，主要用于处理网页的交互，比如表单验证、<code>DOM</code>操作等。如果使用多线程，可能会带来复杂的同步问题，比如多个线程同时操作<code>DOM</code>，容易导致竞态条件和不可预测的结果。所以<code>JavaScript</code>采用了单线程模型来避免这些问题。</p><p>虽然主线程是单线程，但<span class="hh">单线程≠只能做一件事</span>，通过事件循环和异步队列的机制，<code>JavaScript</code>可以实现非阻塞的异步操作，比如网络请求、定时器、文件读写（<code>Nodejs</code>）等。</p><p>这就 <strong><code>JavaScript</code>单线程的</strong> 原因</p></div><p>面对这么多的任务，浏览器采用<code>排队轮询</code>的机制来进行任务调度。</p><ol><li>浏览器会提供一个<code>消息队列</code>，用于存储等待执行的任务</li><li>渲染主线程会进入无限循环</li><li>自上而下执行<code>JavaScript</code>的同步代码，并将异步任务放入到<code>消息队列</code></li><li>每次循环会检查<code>消息队列</code>是否有任务存在，如果有，就依次取出一个任务执行，执行完后进行下一次循环；如果没有，则进入休眠状态。</li><li>其他的线程可以往<code>消息队列</code>添加任务，新任务会添加在<code>消息队列</code>的队尾</li><li>不断循环这个过程，直到<code>消息队列</code>清空，进入休眠，一旦有任务又会被激活</li></ol><h3 id="异步任务" tabindex="-1">异步任务 <a class="header-anchor" href="#异步任务" aria-label="Permalink to &quot;异步任务&quot;">​</a></h3><p><img src="'+t+`" alt="异步任务"></p><p><code>JavaScript</code>是一门单线程语言，如果采用同步的方式，极有可能会导致后面代码产生阻塞，<code>消息队列</code>中的任务造成堆积无法得到执行。</p><p>所以浏览器采用异步的方式来避免。当某些任务发生时，比如网络、计时器、事件这些异步任务，主线程会将任务交给其他线程处理，自身立即结束当前异步任务的执行，转而继续执行后续同步代码。</p><p>当其他线程完成的时候，会将事先包装好的回调函数包装成异步任务对象，加入到<code>消息队列</code>的队尾，等待主线程调度执行。</p><p>也就是说，大多数的异步任务其实是回调函数，<code>Promise.then(task)</code>、<code>setTimeout(task,0)</code>、<code>fetch(task)</code>等。</p><p><code>消息队列</code>中的任务可以存在很多条，同一个任务必须在一个队列，不同类型的任务可以分类为不同的队列，这些队列之间是存在优先级的，<code>W3C</code>将这些<code>消息队列</code>分类为以下几种：</p><table tabindex="0"><thead><tr><th>队列类型</th><th>任务内容</th><th>优先级</th></tr></thead><tbody><tr><td>微任务队列</td><td><code>Promise。then()</code>，<code>MutationObserver</code>的回调函数，<code>queueMicrotask()</code>的回调函数等。</td><td>最高</td></tr><tr><td>交互队列</td><td>用户交互事件的回调函数，例如<code>click</code>、<code>postMessage</code>的回调等</td><td>高</td></tr><tr><td>延时队列</td><td>计时器的回调函数，比如<code>setTimeout</code>、<code>setInterval</code></td><td>中</td></tr><tr><td>网络请求队列</td><td>网络请求的回调函数，比如<code>fetch</code>、<code>XMLHttpRequest</code>的回调</td><td>中</td></tr><tr><td>渲染任务队列</td><td>页面渲染相关的任务，比如重绘、重排等</td><td>低</td></tr></tbody></table><p>下面通过一个具体的代码案例，说明浏览器事件循环的过程：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写出下述程序的输出结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> btn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;function test!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;set timer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;click button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">btn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;promise2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;script start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果依次为：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// click button</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// script start</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// promise2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// set timer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// function test!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// promise1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h3 id="加点promise" tabindex="-1">加点<code>Promise</code> <a class="header-anchor" href="#加点promise" aria-label="Permalink to &quot;加点\`Promise\`&quot;">​</a></h3><h3 id="async-await" tabindex="-1">async / await <a class="header-anchor" href="#async-await" aria-label="Permalink to &quot;async / await&quot;">​</a></h3>`,38)]))}const y=i(h,[["render",k]]);export{b as __pageData,y as default};
